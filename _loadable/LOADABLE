#! /hint/sh

__load_loadable() {
	unalias "$1" 2>/dev/null || {
		# NOTE: fn should not try to load itself/(or longer version of itself)
		# in function body. Or this will create recursion here
		"$@"
		return
	}

	# for now no bash specific fn-s
	if [ -e "$B"/_loadable/"$1"."$sh_is" ]; then
		. "$B"/_loadable/"$1"."$sh_is"
	elif case "$sh_is" in "$sh_is_") false;; *) [ -e "$B"/_loadable/"$1"."$sh_is_" ]; esac; then
		. "$B"/_loadable/"$1"."$sh_is_"
	else
		. "$B"/_loadable/"$1".sh
	fi

	# note: no aliases allowed
	"$@"
}


# TODO: separate CD and cd.. fns

# LOADABLE-aliases:
alias \
+=_plus_ \
'cd+'='_cd_plus' \
'cd++'='_cd_plusparents' \
CD='cd..' \
'cd..'=_cd__ \
'..'=_cd__ \
'cd.which'='cd.. which-ll' \
'cd.'=_cd_dot \
\
song=_song \
pwd=_pwd_ \
\
+='_plus_' \
ll.parents='_ll_parents' \
set-x='_set_x' \
'type=_type_' '?=_type_' '??=_type_ -a' \
e.loadable='_edit_loadable ' \
;
# git='_git' \ # fn not done
# ?- is from "$B"/a


unset-unseted-i
for i in "$B"/_loadable/[a-zA-Z0-9_]*.sh ${sh_is_bash+"$B"/_loadable/[a-zA-Z0-9_]*.bash}; do
	i=${i##*/}
	i=${i%.*}
	# arg "$i"
	# (dont use for now fn): eval " $i(){ __load_loadable $i \"\$@\" }"
	alias "$i"="__load_loadable $i"
	## arg "$i"="__load_loadable $i"
done
unset-seted-i
