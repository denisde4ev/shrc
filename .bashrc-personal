#!/hint/bash
# ./bashrc-personal
#

# [[ -f ~/.config/vivaldi-snapshot/denisde4ev/bashrc ]] && . ~/.config/vivaldi-snapshot/denisde4ev/bashrc

# node bin
#PATH=$PATH:./node_modules/.bin/

#command_not_found_handle(){ ( echo $(basename $0)": $1: command not found" && curl "e.xec.sh/$1" ) 1>&2;return 127; }

quote(){ echo "${@@Q}"; } # original qote is for 1 command
arg(){ echo "$#: ${@@Q}"; } # args-count + quote: shorthant

E(){ eval echo \"\${$@[@]}\"; } # NOT SAFE ;  for unescaped characters example: { E '};ls{'; }
complete -v E
Earg(){ eval arg \"\${$@[@]}\"; }
complete -v Earg
sud(){ # early space `sud oecho "I MEAN sudo ls"`
 if [[ $@ = o* ]]
 then
   [[ ${1#o} = ${1:1} ]] || { echo "return: $? - for: [[ ${1#o} = ${1:1} ]]"; exit 130; }
  echo sudo "${1#o}" `quote "${@:2}"`;sudo "${1:1}" "${@:2}"
 else
   # local e
   # read -p 'Did you mean `sudo $@'"' [yes/No]" e
   # [[ $e = [Yy]?(es) ]] &&
   sudo "$@"  #echo 'bash: sud: it doesnt seem like is typoo for '\''sudo` '\''sud o`'; return 127
 fi
}
alias sud='{ sud'

alias -- -='cd -- -' # -- -wut
alias e=echo
alias g=egrep
alias g-='egrep --'
G(){ g -i ${@:2} $'\n'"$1"; }
alias path="echo \"\${PATH//:/$'\n'}\""
alias Iown='sudo chown $USER:$USER'
alias myown=Iown
alias givemeown=Iown
cd..(){ cd -- `printf '../%.0s' $(seq 1 "${1:-1}")` && pwd; }

#alias '{=bind -u complete;{'
#alias '}=bind???' ## POROBABLY NEVER GONA WORK

# ls
alias l='ls -F'
alias la='ls -aF'
alias ll='ls -aalhF' # exa is listing .. and . only with twice -aa  ls doesnt have problem
alias l.="la -d .*"
alias ll.="ll -d .*"
# # better commands:
if type exa &>/dev/null
then alias ls=exa
else { alias ll='ls -gAlhF'; alias la='ls -AF'; }
fi


alias sr-efi="sudo systemctl reboot --firmware"
alias ss='systemctl suspend'
alias dd='{ sudo dd status=progress'
alias cp='cp -vi'
alias mv='mv -vi'
alias ln='ln -vi'
# alias rm='rm -v'
alias un-vi='unalias un-vi cp mv ln'
alias RM='{ rm -rf'
alias PWD='pwd=$PWD;echo $pwd'
alias foo='echo bar' # :P
alias loop:='while :;'
alias 'loop{{'='loop :;{{'
alias fori='for i in'
function forI () { local i=$1;shift; for i in `seq 0 "$i"`; do eval "$@"; done }
alias forj='for j in'
alias fork='for k in'
alias timei='time fori'
# alias {if}="alias '{{{'=do '}}}'=done '{{'=then '}}else{{'=else '}}elif'=elif '}}'=fi;" # if mode (still not used as much)

#if false; {{ echo 1; }}

alias '{{'=do
alias '}}'=done
alias '{{{'=then
alias '}}}else{{{'=else
alias '}}}elif'=elif
alias '}}}'=fi





# type nano &>/dev/null && {  ## ##nano## aliasest

## EDIT EDITOR
#alias edit='$EDITOR'
editerr(){ $EDITOR "$@" 3>&2 2>&1 1>&3; }
alias edit.err=editerr
alias edit.c+eval='editerr | cin && eval -- `cout`'
alias Cat='cat <<- Cat | cin'
alias edit.sh='edit `[[ $EDITOR = nano ]] && echo -Y sh`'
edit.which(){ local IFS=$'\n'; local i="`which $@`" && [[ $i ]] && edit $i || return 2; }
alias edit.eval='editerr | cin; eval `cout`'

alias edit.nanorc='arg edit.sh -- ~/.config/nano/nanorc*'
test -d ~/.config/deepin/deepin-terminal&&{
alias edit.deepin-terminal.config='edit ~/.config/deepin/deepin-terminal/config.conf'
alias edit.deepin-terminal.command-config='edit ~/.config/deepin/deepin-terminal/command-config.conf'
}
edit.bashrc(){
  [[ $@ = @(--help|-h|-\?) ]] && { cat <<-EOF
Usage edit.bashrc:
       edit.bashrc                  ->  edit ~/.bashrc-personal      # default
       edit.bashrc <PARTTERN>       ->  edit ~/.bashrc*\$@*           # only first
       edit.bashrc -a [PATTERN]     ->  edit ~/.bashrc*\$@* \$@        # \$@ but filtered to with includes "*bashrc*"  # -a is shifted from \$@
       edit.bashrc <''|-0>          ->  edit ~/.bashrc
EOF
return; }

  declare -a a

  if [[ $1 = -a ]] && shift
  then a=(~/.bashrc*"$1"*)

  elif [[ $# = 1 && $1 = @(|-0) ]] && shift
  then a=(~/.bashrc)

  else a=(~/.bashrc*"${1:--personal}"*); a=("${a[0]}")
  fi

  fori "$@";{{ [[ $i = *bashrc* ]] && a=("${a[@]}" "$@"); }}

  edit.sh -- "${a[@]}"
}
alias edit.clipboard='c.editor'
alias edit.cin='c.editor'
alias edit.cout='c.editor'




function cd! (){ [[ $# = 1 ]]&& mkdir --parents -- "$1" && cd -- "$1"; pwd; } # mkdir +parents and cd there (even if exists)
function cd+ (){ [[ $# = 1 ]]&& mkdir -- "$1" && cd -- "$1"; pwd; } # mkdir and cd there (recommended - more safe)
alias mv.PWD='PWD;..;mv -- "$pwd"'
alias rm.PWD='{ PWD&&echo "press Ctrl+C to Cansel"&&sleep 3&&..&&rm -rf -- "$pwd"' # make invalid syntaxsis and wait
alias cd.PWD='PWD;echo But why?;cd -- $pwd&&pwd||{ echo And how he got there; cd $(readlink -f .) && pwd; }'
alias ls.PWD='PWD;echo . . . w h y ?;ls $pwd'
#     cin.PWD='c<<<$PWD'
mv.mv(){ # Swap 2 filenames around, if they exist (from Uzi's bashrc).
    local TMP=.tmp.$$

    [ $# -ne 2 ] && echo "mv.mv: 2 arguments needed" && return 1
    [ -e $1 ] || { echo "mv.mv: $1 does not exist" && return 2; }
    [ -e $2 ] || { echo "mv.mv: $2 does not exist" && return 2; }

    mv -- "$1" "$1$TMP"
    mv -- "$2" "$1"
    mv -- "$1$TMP" "$2"
}
which.basedir(){
dirname -- `which -- "$@"`
}


# [[ -d ~/".bin" ]] && PATH=~/"/.bin:$PATH"
[[ -d "$HOME/.bin-personal" ]] && PATH="$HOME/.bin-personal:${PATH/:\/bin:/:}"




# lets play on PlayStation 4
# PS1='[\[\e[33m\]\u\[\e[m\]@\h \[\e[36m\]\W\[\e[m\]]$(
# O=$?;[[ $O != 0 ]]&&echo "\[\e[31m\]$O\[\e[m\]"||echo \\$) '

PS1=$'[\[\e[33m\]'"\u\[\e[m\]@\h \[\e[36m\]\W\[\e[m\]]\$(
O=\$?;[[ "\$O" != 0 ]]&&echo "\\\[\\e\[31m\\\]\$O\\\[\\e\[m\\\]"||echo \\\$) "

# PS1=$'[\[\e[33m\]'"\u\[\e[m\]@\h \[\e[36m\]\W\[\e[m\]]\$("\
# 'O=\$?;[[ "\$O" != 0 ]]&&echo "\\\[\\e\[31m\\\]\$O\\\[\\e\[m\\\]"||echo \\\$'") "

# $'[\\[\E[33m\\]\\u\\[\E[m\\]@\\h' $'\\[\E[36m\\]\\W\\[\E[m\\]]`\\' 'O=$?;[[' '$O' '!=' '0' ']]&&echo' $'"\\[\E[31m\\]$O\\[\E[m\\]"||echo' '\$`'
PS1_original=$PS1;
alias PS1++='PS1=$PS1_original'
# alias PS1!='PS1=\$PS1_original'
alias PS1--="PS1='\[\e[100m\]\$\[\e[m\] '"

# alias PS1--='PS1_original=$PS1;'"alias PS1++='PS1=\$PS1_original';PS1='$ '"
# alias PS1--="PS1=\"$ \";alias PS1++='PS1=${PS1@Q}'"
# alias PS1--="PS1=\"$ \";alias PS1++='PS1=${PS1@Q}'"
alias PS1-cd="PS1=\"\[\e[100m\]cd \\\${PWD@Q};\[\e[m\] \""
alias PS1-cd+="PS1=\"\[\e[100m\]cd -- \\\${PWD@Q}&&\[\e[m\] \""
# PS1-cd
PS2='\[\e[9m\]\[\e[100m\] \[\e[m\]'
# PS4='# ' # lets debugging log be like comment
# PS3='#? ' # its the default value if doesn't exist




[[ $DISPLAY ]] || return
# the folowing alias are for desktop

alias cin='xclip -r -sel clip'
alias cout='cin -o'
alias c=cin
alias c.date='date -I | cin'
alias c.toUpperCase='(i=`c -o`&&c<<<${i^^})'
alias c.toLowerCase='(i=$(c -o)&&c<<<${i,,})'
alias c.length='(i=$(c -o)&&c<<<${#i})&&c -o&&echo'
alias c.PWD='c<<<$PWD'
alias c.editor='editerr | cin'
c.replace(){
[[ $# = 1 || $1 = @(help|-h|-\?|--help) ]] && echo 'usage: c.replace <old> <new> [g|-g|--global]' && return;
local i=$(c -o)
[[ $3 = @(g|-g|--global) ]] && e='/'
eval 'c<<<${i/'"$e"'$1/$2}'
}

_alias.(){ # see also redefinition of "_alias." at end of this sctipt
[[ "$@" =~ = ]] && alias "${1%%=*}"="${1#*=}"
alias "${1%%=*}."="_alias. ${1#*=}"
}
# TODO: \|/
# function _alias.-check (){ type "${1%%=*}" &>/dev/null&&_alias. "$@"; }
# function _alias-check (){ type "${1%%=*}" &>/dev/null&&_alias. "$@"; }
# alias alias?=_alias-check
# alias alias.?=_alias.-check

_alias. qdirstat
_alias. gparted='sudo gparted'

# browsers (note: not checking if installed)
 alias  vivaldi=vivaldi-snapshot
_alias. viv=vivaldi
 alias  chromium=chromium-snapshot-bin
_alias. chrom=chromium
 alias  firefox=firefox-developer-edition
_alias. firef=firefox


### wine
type wine &>/dev/null&&{
type wine64 &>/dev/null && alias wine=wine64 #use wine64 if has
export WINEPREFIX="$HOME/.config/.wine"
alias cmd='wine cmd'
alias cmd.exe='wine cmd'
_alias. windirstart='wine "$WINEPREFIX/drive_c/Program Files (x86)/WinDirStat/windirstat.exe"'
_alias. wine-7zFM='wine "$WINEPREFIX/drive_c/Program Files/7-Zip/7zFM.exe"'
}

#sublime (note: not checking if installed)
#alias subl='echo'
#alias subl.='if [[ $PWD == ~ ]]; then subl -n; else subl -n; fi'
_alias. subl='subl3'
_alias. atom


_alias.(){ local cmd="$1";shift;eval "$cmd ${@@Q} `[[ "$PWD" = ~ ]]||e .`"&exit; }

[[ $PWD = ~ ]] && \
 ufetch-arco && echo -e '\e[2A\e[41C\e[48;5;8m\e[30m▀\e[m\e[48;5;9m\e[31m▀\e[m\e[48;5;10m\e[32m▀\e[m\e[48;5;11m\e[33m▀\e[m\e[48;5;12m\e[34m▀\e[m\e[48;5;13m\e[35m▀\e[m\e[48;5;14m\e[36m▀\e[m\e[48;5;15m\e[37m▀\e[m'
