#!/ /hint/sh

alias \
	echo-1l='printf %s\\n' \
	command.='command >/dev/null -v' \
	\
	fori='for i in' fori{{='for i;{{' \
	'{{=do' \
	'}}=done' \
	loop='while :;' pool='do :;done' elihw='do :;done' 'loop{{=while :;{{' \
	and='(exit $?)&&' or='(exit $?)||' \
;

# at least enshure that var is not defined when using local, dont ever use 'local i=1' or 'local i=$(ls)'
command. __local || eval ' _local() {
	while
		case $# in 0) return 0; esac
		eval "case \"\${${1%%=*}+x}\" in x) return 1; esac" &&\
		case $1 in *=*) eval ": \${${1%%=*}=$(quote "${1#*=}")}"; esac &&\
		shift
	do :; done
}; '


command. cmd-which || eval '{ cmd_which(){(
set -feu
OPTIND=1;getopts c: _;x=$OPTARG
! getopts "" _;shift $((OPTIND-1))  # expected non arg or "--"
IFS=${NEW_LINE?}; set -- $(fori{{ which -- "$i"||echo-1l "$i";}})
unset IFS; eval "${x:?} ${@+"\"\$@\""}" #"
)};alias cmd-which=cmd_which;}'



# if ( i=_; : "${!i}" ) 2>/dev/null 1>/dev/null; then
case $sh_is in
	bash|ash|bb_ash|zsh) shuf_1() { local i;i=$(( ( ${RANDOM:?} % $# ) + 1 )); echo-1l "${!i}"; };;
	 # *) shuf_1() { eval "( echo-1l \"\${$(( ( ${RANDOM:?} % $# ) + 1 ))}\" )"; };;

	# alias history_current_command='history -p \!\!' history_current_command='history -p \!\!';
	# history_current_command() {
		# local i;i=$(IFS=; history | while read -r i; do ${NEW_LINE:+}; done)
	# }

esac

# GNUtector detect if GNU coreutils options are supported
unset os_gnu os_an os_busybox os_toybox
case ${OSTYPE:-$(uname -o)} in
	linux-gnu|GNU/Linux)   os_gnu='';; # check for GNU+Busybox is not important for now
	linux-android|Android) os_an='';; # Termux? but it could be busybox toybox termux or any other shell app ..
	# TODO windows
	linux-musl|Linux) # Alpine, KISS
		i=$(command -v ls)
		case $i in # note: this will fail if ls is alias or fn
			ls) os_bb='';; # applet is build in
			*/ls) false;;
			*)
			echo-1l >&2 \
				"~/B/_core: got unexpected output" \
				"~/B/_core: \$ command -v ls -> $i" \
				"~/B/_core: \$?:$?" \
			;
			return 1
		esac || { [ -L "$i" ] && os_bb=''; } || {
			i=$(readlink -- "$i" 2>/dev/null)
			case $?:$i in
				0:*/busybox|busybox) os_bb='';;
				0:*/toybox|toybox) os_bb=''; os_toybox='';;
				*)
				echo-1l >&2 \
					"~/B/_core: well idk then what this OS this is, 'ls' seems to not be a symlink" \
					"~/B/_core: \$ readlink -- \$(command -v ls) -> $i" \
					"~/B/_core: \$?:$?" \
				;	
				return 1
			esac
		}
	;;
	*) echo-1l >&2 "~/B/_core: cannot detect current os GNU/(Busybox+Musl)/Android"; return 1;;
esac

return

#command_fn() { # never used , uncomment when needed
#  # type "$1" 2>/dev/null | grep -qe function\$ # POSIX
#  # [[ `type -- "$1" 2>/dev/null` = *\ function ]] # bashism
#  # WARING: tested in (bash,zsh,dash,ksh,yash), test more?
#  
#  case "$(command -V -- "$1" 2>/dev/null | head -n 1)" in
#  (*\ function) return 0;;
#  (*) return 1;
#  esac
#}
#

# shuf_1(){
	# eval "printf %s\\n \"\${10}\""
	# eval "printf %s\\n \"\${$(( ( ${RANDOM:-1$(\dd if=/dev/urandom count=3 2>&- | tr -d -c '0-9' | head -c 10)} % $# ) + 1 ))}\""
	# shift "$(( ${RANDOM:-1$(\dd if=/dev/urandom count=8 bs=1000 2>&- | tr -d -c '0-9' | head -c 10)} % $# ))"
	# printf %s\\n "$1"
# }
#bash shuf:

# # var_1l(){ set -f; eval "echo-1l \${${1}}";} # print var separated by IFS to \n
# _tr_sh(){ ( set -f; IFS=$1; eval "set -- \${${3:-}}"; IFS=$2; printf %s\\n "$*"; ); } # supports 1 char only
# # PATHseparator=$( PATH=1:2 ; printf %c "${PATH#1}" ) # expected Windows to use ';'
# command. env: || alias env:='IFS="${PATHseparator:-":"}" var_1l'

# alias alias--='alias 2>&- --' # was used only 1 and now no mire since `alias cd-='cd -' -='cd -'`
