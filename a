#! /hint/sh
# TODO: move @op5-* aliases to separate file OR external file with bind for @ OR at least detect if has @op5 command

alias \
patch='patch --forward --strip=1' \
@op5-sms-list-l1='@op5 termux-sms-list -l1' \
c#='\c# #' \
exec='\exec ' \
_0='cd ~/0/gh/_0' \
0='cd ~/0' \
0-gh='cd ~/0/gh' \
0-ghdd='cd ~/0/ghdd-masters' \
speak-rmhash='sed -uEe "s/(^| )#( |$)//g" | speak' \
speak='time \speak -l bg -s 270' \
git-lazy-commit-message-filechanges='(printf %s "#âž”"; git status -s | sed -nEe "s/^([A-Z])./\\1/p" | tr "\\n" \;; echo) | GIT_EDITOR="$EDITOR" git commit -F - -e' \
git-lazy-commit-message-date='git commit -m "#$(date -I)" -e' \
dotfiles-lazy-commit-message-filechanges='(alias git=dotfiles; eval git-lazy-commit-message-filechanges)' \
dotfiles-lazy-commit-message-date='(alias git=dotfiles; eval git-lazy-commit-message-date)' \
gpg='DISPLAY= \gpg' \
whileReadI-do='unset-unseted-i; while IFS= read -r i; do ' \
shred='shred -uz -n 3' \
losetup='\losetup --find --show --verbose --partscan' \
http-server='python3 -m http.server' \
@op5-cin='ssh op5 "~/bin/termux/cin"' \
@op5-cout='ssh op5 "~/bin/termux/cout"' \
@op5-'find-play3'='@op5 $ find-play3\!' \
@op5-vibrate='ssh op5 termux-vibrate' \
@op5-qn='ssh op5 -t "micro /0/Documents/markor/QuickNote.md; exec bash -il"' \
%%%='%% & exit' \
nyx='sudo -u tor nyx' \
\
d='date -I' \
d--='puts "---- $(d) ----"' \
\
todo='e ~/d/todo.md' \
todo-archive='e ~/0/archive/todo.md' \
todo-fzf='puts ~/d/*[Tt][Oo][Dd][Oo]* | fzf' \
TODO='cd ~/d/TODO.d' \
sampler='sampler --config /~arcowo/.config/sampler/sampler.yml' \
PP='P --noconfirm' \
foo='echo bar' \
whatislove='( printf "What is love?\\nOh baby, don\\x27t hurt me\\nDon\\x27t hurt me\\nNo more...\\n" )' \
whatislove.stderr='( printf "What is love?\\nOh baby, don\\x27t hurt me\\n"; printf "Don\\x27t hurt me\\n" >&2; printf "No more...\\n" )' \
\
B='cd "$B"' \
bin='cd ~/.loca/bin' \
CCCCCCC='sudo loadkeys carpalx; setxkbmap "us(carpalx)"' \
\
7z-mx9='7z a -r -t7z -m0=lzma2 -mx=9 -myx=9 -mqs=on -ms=on' \
\
xmrig='( case $TERM in screen-*) xmrig ;; *) byobu new doas xmrig; esac )' \
bat='\bat --style header,numbers,rule,snip' \
BAT='bat -A' \
bat-f='bat --decorations=always' \
cut-f='cut -d " " -f' \
wc-l='\wc -l' \
IFS='set -f; IFS="${NEW_LINE:-$new_line}"' \
bash-debugger-start='debugger=1 bash-debugger' \
argv='(arg "$@")' \
fd.swap='3>&2 2>&1 1>&3 '  fd.copy-err='tee /dev/stderr' \
\
mongod='\mongod --logpath /dev/stdout' \
llw='ll.which' \
cdw='cd.which' \
cw='cd.which' \
cd.tmp='cd "$(mktemp -d -t tmp.shpid$$.XXXX)"' \
cd.mktemp='cd.tmp' \
cd-='cd -' \
\
path='( IFS=${PATHseparator:-":"}; set -f; puts $PATH )' \
printf.quote-this='printf %s\\n \!#:q' \
printf.quote='printf "%q\\n"' \
nbsp='printf \\xC2\\xA0\\n' \
\
'-=echo ' \
'?-=quote ' \
'?-1l=puts ' \
'R!=history -r' \
'S!=sudo \$ "$(history -p \!\!)"' \
'D!=doas \$ "$(history -p \!\!)"' \
'C!=printf %s "$(history -p \!\!)" | cin' \
'CC!=printf %s "$(history -p \!:q)" | cin' \
\
grep='\grep --color=auto' \
egrep='\egrep --color=auto' \
pgrep='\pgrep --color=auto' \
${os_gnu+
	diff='\diff -s --color=auto' \
	micro-diff='\micro-diff -s --color=auto' \
} \
edit-genpath='edit-genpath -u' \
diff-arch='diff --unified --recursive --text' \
pacman-diffs='(find /etc 2>/dev/null -name "*.pacnew" -mtime -360 -type f | sed "s/.pacnew\$//")' \
\
mv='\mv -vi' cp='\cp -vi' ln='\ln -vi' chmod='\chmod -v' chown='\chown -v' readlink='\readlink -v' \
mvT='mv -T' cpT='cp -T' ln-fTv='\ln -fTv' \
mount='\mount -v' \
rm='\rm -v' rmdir='\rmdir -v' micro-diff-rm='\micro-diff-rm -v' rmt='rmtrash -v -r' \
umount='\umount -v' umount-fzf='\umount-fzf -v' mv-ln='\mv-ln -vi'${os_gnu+" -r"} \
\
Imount='mount --options "uid=${UID:-"$(id -n)"},gid=${GROUPS?:-"$(id -g)"}"' \
Iown='chown "${UID:-"$(id -u)"}:${GROUPS-"$(id -g)"}"' \
Iown.u='chown "${UID:-"$(id -u)"}"' \
Iown.g='chown "${UID:-"$(id -u)"}:${GROUPS-"$(id -g)"}"' \
Iinstall='install -o "${USER:-"$(id -un)"}" -g "$(id -gn)" `: todo: fix installed from /dev/null is executable, sis this how it should work and why does not take the umask num  :` ' \
777='chmod 777'  755='chmod 755' \
192='ip route get 1 | rg -o "src [^ ]*" | cut-f 2' \
myip='(curl -s ipinfo.io/ip;echo)' \
1.1='ping 1.1' \
ping='\ping -c 128' \
\
rsync='\rsync -azvhP' \
fuserumount='fusermount -u' \
termbin="nc termbin.com 9999" \
sync='time \sync' \
pv='time \pv' \
\
tt='time tt-split -showwpm -noskip -oneshot' \
\
sshd='"$(which \sshd)" -p 8022 -d -f ~/.ssh/sshd/sshd_config -h ~/.ssh/sshd/ssh_host_ed25519_key' \
git.customssh='GIT_SSH_COMMAND="ssh -i ~/0/GH/deni2020/.ssh/id_ed25519" git push' \
minicom='\minicom -m -c on -D unix#/tmp/ttyS0' \
\
df='\df -h' \
du='\du -h' \
dust='\dust --reverse --limit-filesystem' \
free='\free -mt' \
lsport='( \netstat -tulpn || echo exit code $?, todo: "https://linuxhint.com/how_to_list_open_ports_on_linux/" ) ' \
\
userlist='cut -d: -f1 /etc/passwd' \
update-grub="sudo grub-mkconfig -o /boot/grub/grub.cfg" \
pactree='\pactree --color' \
\
adb-kill-server='adb kill-server' \
\
fori_in_shs='for i in posh yash dash bash mksh ash `: toysh` zsh' \
fori_in_shs:='fori_in_shs ; {{ $i -c ":" ; }}' \
\
reboot-firmware-setup='systemctl reboot --firmware-setup' reboot-efi=reboot-firmware-setup \
\
startplasma-wayland='SHLVL= \startplasma-wayland' \
byobu='SHLVL= \byobu' \
startx='SHLVL= startx ~/.config/xorg-xinit/xinitrc' \
\
wget='\wget -c -t 5' \
zsh='zsh --no-rcs' \
gparted='fakeroot /usr/lib/gparted/gpartedbin' \
dd="\\dd${os_gnu+" status=progress"}" \
${sh_is_bash+l.did='ll -d /did/!(.|..|*-part*)'} \
${sh_is_bash-l.did='Zfind /did/ -maxdepth 1 -mindepth 1 -not -path "*-part*" | Zx ll -d --'} \
\
${os_gnu+xargs='\xargs -d \\n -r'} \
${os_bb+xargs='tr \\n \\0 | \xargs -0 -r'} \
x='xargs ' \
x%='x -I% ' \
xo='(x% open %)' \
\
\
'__'=_before_command_not_found_handle \
t.='__ t.' \
open.='__ open.' \
thunar.='__ thunar.' \
gparted.='__ gparted.' \
qdirstat.='__ qdirstat.' \
konsole.='__ konsole.' \
\
ll='${LSLONG_COMMAND:-ls -al}' \
\
;

if command. exa; then
export LSLONG_COMMAND="exa -alF --git --time-style iso --group-directories-first -g"
alias \
ls='exa -aF1 --group-directories-first' \
l='exa -alF --git --time-style iso --group-directories-first -a' \
llT='exa -alF --time-style iso --group-directories-first -Th' \
llT0='llT --level 0' llT1='llT --level 1' llT2='llT --level 2' llT3='llT --level 3' llT4='llT --level 4' llT5='llT --level 5' \
;
else
export LSLONG_COMMAND='ls -alF --group-directories-first'
alias \
ls='\ls -F --color=auto -1 --group-directories-first' \
l='ll' \
;
fi

if command. pacman; then
alias \
pacmna='pacascii;pacman' \
pamcna='pacascii;pacman' \
pacamn='pacascii;pacman' \
pacmana='pacascii;pacman' \
paccman='pacascii;pacman' \
\
yay='pacascii;trizen' \
trien='pacascii;trizen' \
rizen='pacascii;trizen' \
trizzen='pacascii;trizen' \
trizeen='pacascii;trizen' \
trizn='pacascii;trizen' \
trize='pacascii;trizen' \
trizne='pacascii;trize' \
trzen='pacascii;trizen' \
\
p='trizen' \
rm.pacmanlock='rm /var/lib/pacman/db.lck' \
;
fi

# ${os_gnu-return} # return if not gnu os

# detect if we are home
case ${HOME-}:${HOSTNAME-} in ~arcowo:kpc)
	alias \
		minecraft-1.12.2='/~arcowo/0/game/MC/1.12.2/start' minecraft-1.16.5='/~arcowo/0/game/MC/1.16.5/start' \
		HOME-disallowed='\HOME-disallowed --homepath ~arcowo' \
	;;
*) return;;
esac

return

# NOTES:

# alais sudo='\sudo ' is from ./_env ,
# alias xargs is from ./Z

# never used aliases:
# mount-grep='mount | grep'
# mount-grep-pwd='(mount | grep -o "$PWD[^ ]*")'
# fd.err='>&2 '  fd.to2='>&2 '  fd.out='>&1 '  fd.to1='>&1 '
# 0wn='chown 0:0' \

 # '/did' is (Disk ID) a symlink to '/dev/block/by-id'

# path='pts "$PATH" | tr : \\n'
# wrong: nbsp='printf \\uA0\\n' \
